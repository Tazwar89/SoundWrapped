name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Test environment variables
  POSTGRES_DB: soundwrapped_test
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  SOUNDCLOUD_API_KEY: ${{ secrets.SOUNDCLOUD_API_KEY }}

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      working-directory: ./backend
      run: |
        mvn clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}
        SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

    - name: Generate test coverage
      working-directory: ./backend
      run: mvn jacoco:report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        flags: backend

  # Frontend Tests (when ready)
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  # Docker Build & Integration Test
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test .env file
      run: |
        echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" >> .env
        echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
        echo "SOUNDCLOUD_API_KEY=${{ env.SOUNDCLOUD_API_KEY }}" >> .env
        echo "SPRING_PROFILES_ACTIVE=docker" >> .env

    - name: Build and start services
      run: |
        docker compose -f docker-compose.yml up -d --build

    - name: Wait for services to be ready
      run: |
        echo "Waiting for backend to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:8081/actuator/health > /dev/null 2>&1; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Add your integration test commands here
        # Example: curl tests, or run specific test suites
        curl -f http://localhost:8081/actuator/health
        # You could also run specific integration test suites

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f

  # Build and Push Docker Images (on main branch)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/soundwrapped-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/soundwrapped-backend:${{ github.sha }}

    - name: Build and push frontend image (when ready)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/soundwrapped-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/soundwrapped-frontend:${{ github.sha }}