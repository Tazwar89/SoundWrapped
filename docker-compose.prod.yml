version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: soundwrapped-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - soundwrapped-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    image: ${DOCKER_USERNAME}/soundwrapped-backend:latest
    container_name: soundwrapped-backend-prod
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SOUNDCLOUD_CLIENT_ID: ${SOUNDCLOUD_CLIENT_ID}
      SOUNDCLOUD_CLIENT_SECRET: ${SOUNDCLOUD_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - soundwrapped-network

  # React Frontend
  frontend:
    image: ${DOCKER_USERNAME}/soundwrapped-frontend:latest
    container_name: soundwrapped-frontend-prod
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${API_BASE_URL}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - soundwrapped-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: soundwrapped-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - soundwrapped-network

networks:
  soundwrapped-network:
    driver: bridge

volumes:
  postgres_data_prod:
